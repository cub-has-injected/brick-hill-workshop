[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode unshaded, depth_draw_never, depth_test_disable;

uniform float z_near = 0.05;
uniform float z_far = 100.0;
uniform vec4 highlight_color: hint_color = vec4(0.1, 0.1, 0.8, 1.0);

const float edge_count_rcp = 1.0 / 9.0;

float sample_depth(sampler2D depth, vec2 uv)
{
    float z_b = texture(depth, uv).x;
    float z_n = 2.0 * z_b - 1.0;
    return 2.0 * z_near * z_far / (z_far + z_near - z_n * (z_far - z_near));
}

void fragment() {
	vec2 frag_size = fwidth(SCREEN_UV);
	float depth = sample_depth(DEPTH_TEXTURE, SCREEN_UV);
	
	float size = 2.0;
	
	float edge = 0.0;
	for(float x = -size; x <= size; x += size)
	{
		for(float y = -size; y <= size; y += size)
		{
			float depth_left = sample_depth(DEPTH_TEXTURE, SCREEN_UV + vec2(x, y) * frag_size);
			float depth_delta = depth_left - depth;
			edge += depth_delta;
		}
	}
	edge *= edge_count_rcp;
	edge = max(edge, 0);
	
	ALBEDO = vec3(edge) * highlight_color.xyz * highlight_color.w;
}"

[resource]
render_priority = 1
shader = SubResource( 1 )
shader_param/z_near = 0.05
shader_param/z_far = 100.0
shader_param/highlight_color = Color( 0.1, 0.1, 0.8, 1 )
